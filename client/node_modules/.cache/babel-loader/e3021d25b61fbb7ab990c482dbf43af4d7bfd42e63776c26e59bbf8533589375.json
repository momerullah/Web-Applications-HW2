{"ast":null,"code":"var _jsxFileName = \"/Users/cdmstudent/Documents/GitHub/Web-Applications-HW2-main/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useEffect, useMemo } from 'react';\nimport './App.css';\nimport UserBar from './UserBar';\nimport CreateTodo from './CreateTodo';\nimport TodoList from './TodoList';\nimport { StateContext } from './contexts';\nimport { userReducer, userInitialState } from './context/UserContext';\nimport { todoReducer, todoInitialState } from './context/TodoContext';\nimport { useResource } from 'react-request-hook'; // Import useResource from wherever it's defined\n\n// Combined initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: userInitialState,\n  todo: todoInitialState\n};\n\n// Combined reducer function\nfunction appReducer(state, action) {\n  return {\n    user: userReducer(state.user, action),\n    todo: todoReducer(state.todo, action)\n  };\n}\nfunction App() {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [todosResource, getTodos] = useResource(() => ({\n    url: '/todos',\n    method: 'get'\n  }));\n  useEffect(() => {\n    dispatch({\n      type: 'FETCH_TODOS_REQUEST'\n    });\n    getTodos().then(response => {\n      if (response && response.data) {\n        dispatch({\n          type: 'FETCH_TODOS_SUCCESS',\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: 'FETCH_TODOS_FAILURE',\n          payload: 'Failed to fetch todos'\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: 'FETCH_TODOS_FAILURE',\n        payload: error.message\n      });\n    });\n  }, [getTodos]); // Empty array means this effect will only run once, like componentDidMount\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    state,\n    dispatch\n  }), [state, dispatch]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ToDo App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), state.user.isLoggedIn && /*#__PURE__*/_jsxDEV(CreateTodo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 35\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5GyxfUzyVLVfRtTAdIuYSjyj7IY=\", false, function () {\n  return [useResource];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useReducer","useEffect","useMemo","UserBar","CreateTodo","TodoList","StateContext","userReducer","userInitialState","todoReducer","todoInitialState","useResource","jsxDEV","_jsxDEV","initialState","user","todo","appReducer","state","action","App","_s","dispatch","todosResource","getTodos","url","method","type","then","response","data","payload","catch","error","message","contextValue","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","isLoggedIn","_c","$RefreshReg$"],"sources":["/Users/cdmstudent/Documents/GitHub/Web-Applications-HW2-main/client/src/App.js"],"sourcesContent":["import React, { useReducer, useEffect, useMemo } from 'react';\nimport './App.css';\nimport UserBar from './UserBar';\nimport CreateTodo from './CreateTodo';\nimport TodoList from './TodoList';\nimport { StateContext } from './contexts';\nimport { userReducer, userInitialState } from './context/UserContext';\nimport { todoReducer, todoInitialState } from './context/TodoContext';\nimport { useResource } from 'react-request-hook'; // Import useResource from wherever it's defined\n\n// Combined initial state\nconst initialState = {\n  user: userInitialState,\n  todo: todoInitialState,\n};\n\n// Combined reducer function\nfunction appReducer(state, action) {\n  return {\n    user: userReducer(state.user, action),\n    todo: todoReducer(state.todo, action),\n  };\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [todosResource, getTodos] = useResource(() => ({\n    url: '/todos',\n    method: 'get'\n  }));\n\n  useEffect(() => {\n    dispatch({ type: 'FETCH_TODOS_REQUEST' });\n    getTodos().then((response) => {\n      if (response && response.data) {\n        dispatch({ type: 'FETCH_TODOS_SUCCESS', payload: response.data });\n      } else {\n        dispatch({ type: 'FETCH_TODOS_FAILURE', payload: 'Failed to fetch todos' });\n      }\n    })\n    .catch((error) => {\n      dispatch({ type: 'FETCH_TODOS_FAILURE', payload: error.message });\n    });\n  }, [getTodos]); // Empty array means this effect will only run once, like componentDidMount\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  return (\n    <StateContext.Provider value={contextValue}>\n      <div className=\"App\">\n        <h1>ToDo App</h1>\n        <UserBar />\n        {state.user.isLoggedIn && <CreateTodo />}\n        <TodoList />\n      </div>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}